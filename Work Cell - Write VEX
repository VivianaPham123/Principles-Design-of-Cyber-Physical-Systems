int Brain_precision = 0, Console_precision = 0;


float myVariable;


event message1 = event();


// "when started" hat block
int whenStarted1() {
 RoboticArm1.setMasteringValues(1768.0,2111.0,1729.0,574.0);
 RoboticArm1.setToolTipOffset(1.05, 0.0, -1.0);
 RoboticArm1.moveToPositionJoint(5.2, 4.37, 2.0);
 RoboticArm1.moveToPositionJoint(5.72, -1.77, 2.0);
 wait(0.25, seconds);
 RoboticArm1.moveToPositionLinear(4.1, 5.25, 2.0);
 return 0;
}


// "when EStop pressed" hat block
void onevent_EStop_pressed_0() {
 RoboticArm1.emergencyStop();
}


// "when started" hat block
int whenStarted2() {
 Brain.Screen.setFont(mono60);
 Brain_precision = 3;
 while (true) {
   Brain.Screen.clearScreen();
   // Display the X position on row 1
   Brain.Screen.setCursor(1, 1);
   Brain.Screen.print("X: ");
   Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(xaxis)));
   Brain.Screen.newLine();
   // Display the Y position on row 2
   Brain.Screen.print("Y: ");
   Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(yaxis)));
   Brain.Screen.newLine();
   // Display the Z position on row 3
   Brain.Screen.print("Z: ");
   Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(zaxis)));
   wait(0.2, seconds);
 wait(5, msec);
 }
 return 0;
}




int main() {
 // register event handlers
 EStop.pressed(onevent_EStop_pressed_0);


 wait(15, msec);
 // post event registration


 // set default print color to black
 printf("\033[30m");


 // wait for rotation sensor to fully initialize
 wait(30, msec);


 vex::task ws1(whenStarted2);
 whenStarted1();
}
